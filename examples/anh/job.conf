name: "cifar10-convnet"
train_steps: 2000
test_steps: 100
test_freq: 100
#validate_steps: 100
#validate_freq: 300
#gpu: 0
disp_freq: 50
#checkpoint_path: "examples/cifar10/checkpoint/step1000-worker0"
train_one_batch {
  alg: kBP
}
updater{
  type: kSGD
  weight_decay:0.004
  momentum:0.9
  learning_rate {
    type: kFixedStep
    fixedstep_conf:{
      step:0
      step:60000
      step:65000
      step_lr:0.001
      step_lr:0.0001
      step_lr:0.00001
    }
  }
}
neuralnet {
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "examples/anh/train_data_code_oversampled.bin"
      #mean_file: "examples/anh/image_mean.bin"
      batchsize: 32 
      random_skip: 5000
      shape: 1
      shape: 50000
      #shape: 32
    }
    include: kTrain
  }
#  layer{
#    name: "data"
#    type: kRecordInput
#    store_conf {
#      backend: "kvfile"
#      path: "examples/cifar10/val_data.bin"
#      mean_file: "examples/cifar10/image_mean.bin"
#      batchsize: 64
#      random_skip: 5000
#      shape: 3
#      shape: 32
#      shape: 32
#    }
#    include: kVal
#  }
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "examples/anh/test_data_code_oversampled.bin"
      #mean_file: "examples/cifar10/image_mean.bin"
      batchsize: 32 
      shape: 1
      shape: 50000
      #shape: 32
    }
    include: kTest
  }

  layer {
    name: "conv1"
    type: kCConvolution
    #type: kCudnnConv
    srclayers: "data"
    convolution_conf {
      num_filters: 10
      kernel_x: 11
      kernel_y: 1
      stride_x: 1
      stride_y: 1
      pad_x: 5
      pad_y: 0
    }
    param {
      name: "w1"
      init {
        type:kGaussian
        std:0.0001
      }
    }
    param {
      name: "b1"
      lr_scale:2.0
      init {
        type: kConstant
        value:0
      }
    }
  }

  layer {
    name: "pool1"
    type: kCPooling
    #type: kCudnnPool
    srclayers: "conv1"
    pooling_conf {
      pool: MAX
      kernel_x: 1
      kernel_y: 1
      stride_x: 2
      stride_y: 2
    }
  }
  layer {
    name: "relu1"
    type: kReLU
    srclayers:"pool1"
  }
  layer {
    name: "norm1"
    type: kLRN
    lrn_conf {
      local_size: 3
      alpha: 5e-05
      beta: 0.75
    }
    srclayers:"relu1"
  }
  layer {
    name: "conv2"
    type: kCConvolution
    #type: kCudnnConv
    srclayers: "norm1"
    convolution_conf {
      num_filters: 10
      kernel_x: 11
      kernel_y: 1
      stride_x: 1
      stride_y: 1
      pad_x: 5
      pad_y: 0
    }
    param {
      name: "w2"
      init {
        type:kGaussian
        std:0.01
      }
    }
    param {
      name: "b2"
      lr_scale:2.0
      init {
        type: kConstant
        value:0
      }
    }
  }
  layer {
    name: "relu2"
    type: kReLU
    srclayers:"conv2"
  }
  layer {
    name: "pool2"
    type: kCPooling
    #type: kCudnnPool
    srclayers: "relu2"
    pooling_conf {
      pool: AVG
      kernel_x: 1
      kernel_y: 1
      stride_x: 2
      stride_y: 2
    }
  }
  layer {
    name: "norm2"
    type: kLRN
    lrn_conf {
      local_size: 3
      alpha: 5e-05
      beta: 0.75
    }
    srclayers:"pool2"
  }
  layer {
    name: "ip1"
    type: kInnerProduct
    srclayers:"norm2"
    innerproduct_conf {
      num_output: 2
    }
    param {
      name: "w4"
      wd_scale:250
      init {
        type:kGaussian
        std:0.01
      }
    }
    param {
      name: "b4"
      lr_scale:2.0
      wd_scale:0
      init {
        type: kConstant
        value:0
      }
    }
  }
#  layer {
#   name : "softmax"
#   type: kSoftmax
#   srclayers: "ip1"
#  }
#
#  layer {
#   name : "argsort"
#   type: kArgSort
#   srclayers: "softmax"
#  }
  layer{
    name: "loss"
    type: kSoftmaxLoss
    softmaxloss_conf{
      topk:1
    }
    srclayers:"ip1"
    srclayers: "data"
  }
# uncomment "softmax", "argsort", "output" layer and comment "loss" layer
# to extract features from argsort
#  layer {
#    name : "output"
#    type: kCSVOutput
#    srclayers: "argsort"
#    store_conf {
#      path: "examples/cifar10/out.csv"
#    }
#  }
}
cluster {
  nworker_groups: 1
  nserver_groups: 1
  nworkers_per_group: 1
  nworkers_per_procs: 1
  workspace: "examples/anh"
}
